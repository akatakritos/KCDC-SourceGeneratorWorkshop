using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AutoProperty.Generator;

[Generator]
public class AutoPropertyGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Create a simple filter to find classes that might implement interfaces
        // change the return type to var for simplicity. 
        var pipeline = context.SyntaxProvider.CreateSyntaxProvider(
                predicate: NodeIsEligibleForGeneration,
                transform: TransformNode)
            .Where(static x => x.HasValue) // filter out null
            .Select(static (x, _) =>
                x!.Value); // force result to the nullable value so GenerateOutput doesn't receive null parameters

        context.RegisterSourceOutput(pipeline, GenerateOutput);
    }


    private static bool NodeIsEligibleForGeneration(SyntaxNode node, CancellationToken cancellationToken = default)
        => node is ClassDeclarationSyntax { BaseList.Types.Count: > 0 };

    private static (string NamespaceName, string ClassName)? TransformNode(GeneratorSyntaxContext generatorContext,
        CancellationToken cancellationToken)
    {
        var classDeclaration = (ClassDeclarationSyntax)generatorContext.Node;
        if (classDeclaration.Parent is not BaseNamespaceDeclarationSyntax namespaceDeclarationSyntax)
        {
            return null;
        }

        return (namespaceDeclarationSyntax.Name.ToString(), classDeclaration.Identifier.ValueText);
    }

    // type of second parameter is the type of the output of the transform function
    private static void GenerateOutput(SourceProductionContext context,
        (string NamespaceName, string ClassName) classToGenerate)
    {
        // use an interopolated multi-line string for simplicity. 
        // This could also be done with a StringBuilder or some type of class builder.
        var sourceText = $@"/// <auto-generated>
namespace {classToGenerate.NamespaceName}
{{
    partial class {classToGenerate.ClassName}
    {{
    }}
}}";

        context.AddSource($"{classToGenerate.NamespaceName}.{classToGenerate.ClassName}.g.cs", sourceText);
    }
}